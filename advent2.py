inputText = "LDUDDRUDRRURRRRDRUUDULDLULRRLLLUDDULRDLDDLRULLDDLRUURRLDUDDDDLUULUUDDDDLLLLLULLRURDRLRLRLLURDLLDDUULUUUUDLULLRLUUDDLRDRRURRLURRLLLRRDLRUDURRLRRRLULRDLUDRDRLUDDUUULDDDDDURLDULLRDDRRUDDDDRRURRULUDDLLRRDRURDLLLLLUUUDLULURLULLDRLRRDDLUDURUDRLRURURLRRDDLDUULURULRRLLLDRURDULRDUURRRLDLDUDDRLURRDRDRRLDLRRRLRURDRLDRUDLURRUURDLDRULULURRLDLLLUURRULUDDDRLDDUDDDRRLRDUDRUUDDULRDDULDDURULUDLUDRUDDDLRRRRRDLULDRLRRRRUULDUUDRRLURDLLUUDUDDDLUUURDRUULRURULRLLDDLLUDLURRLDRLDDDLULULLURLULRDLDRDDDLRDUDUURUUULDLLRDRUDRDURUUDDLRRRRLLLUULURRURLLDDLDDD,DRURURLLUURRRULURRLRULLLURDULRLRRRLRUURRLRRURRRRUURRRLUDRDUDLUUDULURRLDLULURRLDURLUUDLDUDRUURDDRDLLLDDRDDLUUDRDUDDRRDLDUDRLDDDRLLDDLUDRULRLLURLDLURRDRUDUDLDLULLLRDLLRRDULLDRURRDLDRURDURDULUUURURDLUDRRURLRRLDULRRDURRDRDDULLDRRRLDRRURRRRUURDRLLLRRULLUDUDRRDDRURLULLUUDDRLDRRDUDLULUUDRDDDDLRLRULRLRLLDLLRRDDLDRDURRULLRLRRLULRULDDDRDRULDRUUDURDLLRDRURDRLRDDUDLLRUDLURURRULLUDRDRDURLLLDDDRDRURRDDRLRRRDLLDDLDURUULURULRLULRLLURLUDULDRRDDLRDLRRLRLLULLDDDRDRU,URUUDUDRDDRDRRRDLLUDRUDRUUUURDRRDUDUULDUDLLUDRRUDLLRDLLULULDRRDDULDRLDLDDULLDDRDDDLRLLDLLRDUUDUURLUDURDRRRRLRRLDRRUULLDLDLRDURULRURULRRDRRDDUUURDURLLDDUUDLRLDURULURRRDRRUUUDRDDLRLRRLLULUDDRRLRRRRLRDRUDDUULULRRURUURURRLRUDLRRUUURUULLULULRRDDULDRRLLLDLUDRRRLLRDLLRLDUDDRRULULUDLURLDRDRRLULLRRDRDLUURLDDURRLDRLURULDLDRDLURRDRLUUDRUULLDRDURLLDLRUDDULLLLDLDDDLURDDUDUDDRLRDDUDDURURLULLRLUDRDDUDDLDRUURLDLUUURDUULRULLDDDURULDDLLD,LRRLLRURUURRDLURRULDDDLURDUURLLDLRRRRULUUDDLULLDLLRDLUDUULLUDRLLDRULDDURURDUUULRUDRLLRDDDURLRDRRURDDRUDDRRULULLLDLRLULLDLLDRLLLUDLRURLDULRDDRDLDRRDLUUDDLURDLURLUDLRDLDUURLRRUULDLURULUURULLURLDDURRURDRLUULLRRLLLDDDURLURUURLLLLDLLLUDLDLRDULUULRRLUUUUDLURRURRULULULRURDDRRRRDRUDRURDUDDDDUDLURURRDRRDRUDRLDLDDDLURRRURRUDLDURDRLDLDLDDUDURLUDUUDRULLRLLUUDDUURRRUDURDRRUURLUDRRUDLUDDRUUDLULDLLDLRUUDUULLDULRRLDRUDRRDRLUUDDRUDDLLULRLULLDLDUULLDRUUDDUDLLLLDLDDLDLURLDLRUUDDUULLUDUUDRUDLRDDRDLDRUUDUDLLDUURRRLLLLRLLRLLRLUUDULLRLURDLLRUUDRULLULRDRDRRULRDLUDDURRRRURLLRDRLLDRUUULDUDDLRDRD,DDLRRULRDURDURULLLLRLDDRDDRLLURLRDLULUDURRLUDLDUDRDULDDULURDRURLLDRRLDURRLUULLRUUDUUDLDDLRUUDRRDDRLURDRUDRRRDRUUDDRLLUURLURUDLLRRDRDLUUDLUDURUUDDUULUURLUDLLDDULLUURDDRDLLDRLLDDDRRDLDULLURRLDLRRRLRRURUUDRLURURUULDURUDRRLUDUDLRUDDUDDRLLLULUDULRURDRLUURRRRDLLRDRURRRUURULRUDULDULULUULULLURDUDUDRLDULDRDDULRULDLURLRLDDDDDDULDRURRRRDLLRUDDRDDLUUDUDDRLLRLDLUDRUDULDDDRLLLLURURLDLUUULRRRUDLLULUUULLDLRLDLLRLRDLDULLRLUDDDRDRDDLULUUR"
inputs = inputText.split(",")

# #Part 1:
# a = [[1,2,3],[4,5,6],[7,8,9]]
# def walkThePad(direction, currentCoords):
    # currentY, currentX = currentCoords
    # try:
        # if direction == "L":
            # if currentX != 0:
				# currentX -= 1
        # elif direction == "R":
            # if currentX != 2:
				# currentX += 1
        # elif direction == "U":
            # if currentY != 0:
				# currentY -= 1
        # else:
            # if currentY != 2:
				# currentY += 1
    # except:
        # return (currentY, currentX)
    
    # return (currentY, currentX)

# coords = (1, 1)
# all_data = []
# for input in inputs:
    # test =[]
    # for direction in input:
        # test.append((a[coords[0]][coords[1]], direction))
        # coords = walkThePad(direction, coords)
        
    # # print test
    # print "stopped at: %s" % str(a[coords[0]][coords[1]])        
    # all_data.append(test)


#Part 2

a= [[1],[2,3,4],[5,6,7,8,9],["A","B","C"],["D"]]
a = [[7,8,9,5,6],[3,4,2],[1],["D"], ["B","C","A"]]

def walkThePad(direction, currentCoords):
    currentY, currentX = currentCoords
    try:
        if direction == "L":
            if currentX-1 in range(-(len(a[currentY]))/2+1, len(a[currentY])/2+1):
                currentX -= 1
        elif direction == "R":
            if currentX+1 in range(-(len(a[currentY]))/2+1, len(a[currentY])/2+1):
                currentX += 1
        elif direction == "U":
            if currentY != 2:
                if currentX in range(-(len(a[currentY+1]))/2+1, len(a[currentY+1])/2+1):
                    currentY += 1
                 
        else:
            if currentY != -2:
                if currentX in range(-(len(a[currentY-1]))/2+1, len(a[currentY-1])/2+1):
                    currentY -= 1
    except:
        return (currentY, currentX)
    
    return (currentY, currentX)

coords = (0,-2)
all_data = []
for input in inputs:
    test =[]
    for direction in input:
        test.append((a[coords[0]][coords[1]], direction))
        coords = walkThePad(direction, coords)
        
    # print test
    print "stopped at: %s" % str(a[coords[0]][coords[1]])        
    all_data.append(test)
        
test1 = 0
test2 = 0

def stuff():
    print all_data[test1][test2]
    test2 += 1